{"mappings":"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","sources":["src/sv.js","src/gen.js","src/noise.js"],"sourcesContent":["/**\n * A class to instantiate a new SvJs element.\n */\nclass SvJs {\n\n  /**\n   * Create an SVG element.\n   * \n   * @param {string} [element] - The name of the SVG element to create. \n   * @param {string} [namespace] - The namespace url to reference.\n   */\n  constructor(element = 'svg', namespace = 'http://www.w3.org/2000/svg') {\n    this.element = document.createElementNS(namespace, element);\n    this.cursorX = null;\n    this.cursorY = null;\n\n    this.#isValid();\n\n    if (this.element.nodeName === 'svg') {\n      this.element.setAttribute('xmlns', namespace);\n    }\n  }\n\n  /**\n   * An alias of the DOM addEventListener method.\n   * \n   * @chainable\n   * @param {Event} type - The event type.\n   * @param {function} callback - The callback function.\n   * @returns {object} itself.\n   */\n  addEventListener(type, callback) {\n    this.element.addEventListener(type, callback);\n    \n    return this;\n  }\n\n  /**\n   * Add the SVG element to the specified node.\n   * \n   * @chainable\n   * @param {node} node - A HTML or SVG parent node.\n   * @returns {object} itself.\n   */\n  addTo(node) {\n    node.appendChild(this.element);\n\n    return this;\n  }\n\n  /**\n   * Animate an element using the Web Animations API.\n   * \n   * @chainable\n   * @param {(array|object)} keyframes - An array of keyframe objects, or an object of keyframe arrays.\n   * @param {object} options - A single duration, or an object containing timing properties. \n   * @returns {object} itself.\n   */\n  animate(keyframes, options) {\n    this.element.animate(keyframes, options);\n    \n    return this;\n  }\n\n  /**\n   * Inserts content within an element. Useful for textual elements.\n   * \n   * @chainable\n   * @param {string} text - The content to insert.\n   * @returns {object} itself.\n   */\n  content(text) {\n    this.element.innerHTML = text;\n\n    return this;\n  }\n\n  /**\n   * Create and append an SVG child element.\n   *\n   * @chainable\n   * @param {string} element - The name of the SVG element to create.\n   * @returns {object} The created SVG child element.\n   */\n  create(element) {\n    this.child = new SvJs(element);\n\n    if (element === 'defs') {\n      this.child.element = this.#defsCheck();\n    } else {\n      this.element.appendChild(this.child.element);\n    }\n\n    return this.child;\n  }\n\n  /**\n   * Creates a smooth, open bezier curve from an array of points.\n   * \n   * @chainable\n   * @param {array} points - A two-dimensional array of [[x,y], [x,y]...] points.\n   * @param {number} [curveFactor = 1] - 0 means that points connected by straight lines. Default is 1.\n   * @returns {object} The created path.\n   */\n  createCurve(points, curveFactor = 1) {\n    let path = new SvJs('path');\n  \n    points = points.flat();\n  \n    let pathData = `M ${[points[0], points[1]]}`;\n  \n    for (let i = 0; i < points.length - 2; i += 2) {\n      let x0 = i ? points[i - 2] : points[0];\n      let y0 = i ? points[i - 1] : points[1];\n  \n      let x1 = points[i];\n      let y1 = points[i + 1];\n  \n      let x2 = points[i + 2];\n      let y2 = points[i + 3];\n  \n      let x3 = i !== points.length - 4 ? points[i + 4] : x2;\n      let y3 = i !== points.length - 4 ? points[i + 5] : y2;\n  \n      let cp1x = x1 + ((x2 - x0) / 6) * curveFactor;\n      let cp1y = y1 + ((y2 - y0) / 6) * curveFactor;\n  \n      let cp2x = x2 - ((x3 - x1) / 6) * curveFactor;\n      let cp2y = y2 - ((y3 - y1) / 6) * curveFactor;\n  \n      pathData += `C ${[cp1x, cp1y, cp2x, cp2y, x2, y2]}`;\n    }\n\n    path.set({\n      d: pathData,\n      stroke: '#888',\n      fill: 'none'\n    });\n\n    this.element.appendChild(path.element);\n\n    return path;\n  }\n\n  /**\n   * Creates a filter and appends it to the defs element.\n   * \n   * @chainable\n   * @param {string} id - The id. Reference this when applying the filter.\n   * @returns {object} The created filter.\n   */\n  createFilter(id) {\n    this.#isMainSVG();\n\n    let filter = new SvJs('filter');\n    filter.set({\n      id: id,\n      x: '-25%',\n      y: '-25%',\n      width: '150%',\n      height: '150%',\n      filterUnits: 'userSpaceOnUse',\n      color_interpolation_filters: 'sRGB'\n    });\n\n    let defs = this.#defsCheck();\n    defs.appendChild(filter.element);\n\n    return filter;\n  }\n\n  /**\n   * Creates a gradient and appends it to the defs element.\n   * \n   * @chainable\n   * @param {string} id - The id. Reference this when applying the gradient.\n   * @param {string} type - Accepts linear or radial.\n   * @param {array} colours - An array of gradient colours to be applied equidistantly.\n   * @param {number} [rotation = 45] - The angle of rotation. Ignored if gradient is radial.\n   * @returns {object} The created gradient.\n   */\n  createGradient(id, type, colours, rotation = 45) {\n    this.#isMainSVG();\n    \n    let gradient = new SvJs(`${type}Gradient`);\n    gradient.set({ id: id });\n\n    if (type === 'linear') {\n      gradient.set({ gradientTransform: `rotate(${rotation})` });\n    }\n\n    for (let i = 0; i < colours.length; i += 1) {\n      gradient.create('stop').set({\n        stop_color: colours[i],\n        offset: i * (100 / (colours.length - 1)) / 100\n      });\n    }\n\n    let defs = this.#defsCheck();\n    defs.appendChild(gradient.element);\n\n    return gradient;\n  }\n\n  /**\n   * Creates a pattern and appends it to the defs element.\n   * \n   * @chainable\n   * @param {string} id - The id. Reference this when applying the gradient.\n   * @param {number} width - The width of the pattern.\n   * @param {number} height - The height of the pattern.\n   * @returns {object} The created pattern element.\n   */\n  createPattern(id, width, height) {\n    this.#isMainSVG();\n    \n    let pattern = new SvJs('pattern');\n    pattern.set({\n      id: id,\n      x: 0,\n      y: 0,\n      width: width,\n      height: height,\n      patternUnits: 'userSpaceOnUse'\n    });\n\n    let defs = this.#defsCheck();\n    defs.appendChild(pattern.element);\n\n    return pattern;\n  }\n\n  /**\n   * Delete the SVG element.\n   */\n  delete() {\n    this.element.remove();\n  }\n\n  /**\n   * Get a given attribute's value.\n   * \n   * @param {string} attribute - The attribute.\n   * @returns {*} the attribute value.\n   */\n  get(attribute) {\n    return this.element.getAttributeNS(null, attribute);\n  }\n\n  /**\n   * Get a given element's centre { x, y } co-ordinates.\n   * \n   * @returns {object} the centre.x and centre.y co-ordinates.\n   */\n  getCentre() {\n    let bbox = this.element.getBBox();\n    let cx = bbox.x + (bbox.width / 2);\n    let cy = bbox.y + (bbox.height / 2);\n    return { x: cx, y: cy };\n  }\n\n  /**\n   * Move an element to a desired position with respect to its centre.\n   * \n   * @chainable\n   * @param {number} x - The target x co-ordinate.\n   * @param {number} y - The target y co-ordinate.\n   * @returns {object} itself.\n   */\n  moveTo(x, y) {\n    let c = this.getCentre();\n    let t = this.#createTransform();\n    \n    t.setTranslate(x - c.x, y - c.y);\n\n    this.#addTransform(t);\n    \n    return this;\n  }\n\n  /**\n   * Rotate an element around a specified origin point (the element centre by default).\n   * \n   * @chainable\n   * @param {number} angle - The angle of rotation.\n   * @param {number} [cx] - The origin x co-ordinate.\n   * @param {number} [cy] - The origin y co-ordinate.\n   * @returns {object} itself.\n   */\n  rotate(angle, cx = null, cy = null) {\n    let c = this.getCentre();\n    let t = this.#createTransform();\n    cx = (cx === null) ? c.x : cx;\n    cy = (cy === null) ? c.y : cy;\n\n    t.setRotate(angle, cx, cy);\n\n    this.#addTransform(t);\n    \n    return this;\n  }\n\n  /**\n   * Saves and downloads the SVG markup.\n   */\n  save() {\n    let name = prompt('Enter the file name', 'sketch.svg');\n    if (name !== null) {\n      let a = document.createElement('a');\n      a.download = name;\n      let data = this.element.outerHTML;\n      let file = new Blob([data], { type: 'text/plain;charset=utf-8' });\n      a.href = URL.createObjectURL(file);\n      a.click();\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Scale an element by a desired proportion.\n   * \n   * @chainable\n   * @param {number} sx - The amount to scale on the x-axis.\n   * @param {number} [sy] - The amount to scale on the y-axis. Defaults to sx if not supplied.\n   * @returns {object} itself.\n   */\n  scale(sx, sy = null) {\n    let c = this.getCentre();\n    let t1 = this.#createTransform();\n    let t2 = this.#createTransform();\n\n    sy = (sy === null) ? sx : sy;\n    t1.setTranslate((1 - sx) * c.x, (1 - sy) * c.y);\n    t2.setScale(sx, sy);\n    \n    this.#addTransform(t1);\n    this.#addTransform(t2);\n    \n    return this;\n  }\n\n  /**\n   * Set the attribute values of an SVG element. Replaces _ with - for relevant attributes.\n   * \n   * @chainable\n   * @param {object} attributes - An object of attribute value pairs.\n   * @returns {object} itself.\n   */\n  set(attributes) {\n    for (let key in attributes) {\n      let prop = key.replace(/_/g, '-');\n      \n      this.element.setAttributeNS(null, prop, attributes[key]);\n    }\n\n    return this;\n  }\n\n  /**\n   * Update the cursorX and cursorY properties on the main SVG element.\n   * Accurate cursor tracking via matrix transformation. Compatible with touch devices.\n   * \n   * @chainable\n   * @param {function} callback - An optional callback function to trigger whenever the cursor moves.\n   * @returns {object} itself.\n   */\n  trackCursor(callback = null) {\n    this.#isMainSVG();\n\n    let point = new DOMPoint();\n\n    this.element.addEventListener('pointermove', (event) => {\n      this.element.style.touchAction = 'none';\n      point.x = event.clientX;\n      point.y = event.clientY;\n      point = point.matrixTransform(this.element.getScreenCTM().inverse());\n      this.cursorX = Math.ceil(point.x);\n      this.cursorY = Math.ceil(point.y);\n    });\n\n    this.element.addEventListener('pointerleave', () => {\n      this.element.style.touchAction = 'auto';\n    });\n\n    if (callback !== null) {\n      this.element.addEventListener('pointermove', callback);\n    }\n\n    return this;\n  }\n\n  /**\n   * Appends an SVG transform object to a transform list.\n   * \n   * @param {object} transform - An SVGTransform object.\n   */\n  #addTransform(transform) {\n    this.element.transform.baseVal.appendItem(transform);\n  }\n\n  /**\n   * Alows for the creation of a cumulative transform.\n   * \n   * @returns {object} An SVGTransform object.\n   */\n  #createTransform() {\n    let root = new SvJs();\n    return root.element.createSVGTransform();\n  }\n\n  /**\n   * Checks if the def element already exists, and creates it if it doesn't.\n   * \n   * @returns {object} The defs element.\n   */\n  #defsCheck() {\n    let defs;\n    if (document.querySelector('defs')) {\n      defs = document.querySelector('defs');\n    } else {\n      defs = new SvJs('defs').element;\n      this.element.prepend(defs);\n    }\n    return defs;\n  }\n\n  /**\n   * Check if the element is the main SVG element.\n   * \n   * @throws {error} if the element is not the main SVG.\n   */\n  #isMainSVG() {\n    if (this.element.nodeName !== 'svg') {\n      throw new Error('This function can only be called on the main SVG element.');\n    }\n  }\n\n  /**\n   * Check if the created SVG element is valid.\n   */\n  #isValid() {\n    const elementToString = Object.prototype.toString.call(this.element).toLowerCase();\n\n    if (elementToString !== `[object svg${this.element.nodeName.toLowerCase()}element]`) {\n      throw new Error(`Invalid SVG element: ${this.element.nodeName}`); \n    }\n  }\n}\n\nexport { SvJs };\n","/**\n * A collection of useful functions for generative art.\n */\nconst Gen = {\n  /**\n   * Return true if the supplied % is higher than a randomised %. If two arguments supplied, they are interpreted as odds.\n   * \n   * @param {number} [n1 = 50] - The chance of the return value being true. 50 by default.\n   * @param {number} [n2 = null] - If not null, both arguments are interpreted as odds in the form n1 to n2.\n   * @returns {boolean} true or false.\n   */\n  chance: function(n1 = 50, n2 = null) {\n    let n = (n2 !== null) ? n2 / (n1 + n2) * 100 : n1;\n    return n > (Math.random() * 100);\n  },\n\n  /**\n   * Constrains (or clamps) a value between a minimum and maximum value.\n   * \n   * @param {number} num - The number to constrain.\n   * @param {number} min - The minimum limit.\n   * @param {number} max - The maximum limit.\n   * @returns {number} The constrained number.\n   */\n  constrain: function(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  },\n\n  /**\n   * Calculates the distance between two points using the Pythagorean theorem.\n   * \n   * @param {number} x1 - The first x co-ordinate.\n   * @param {number} y1 - The first y co-ordinate.\n   * @param {number} x2 - The second x co-ordinate.\n   * @param {number} y2 - The second y co-ordinate.\n   * @returns {number} The distance between (x1, y1) and (x2, y2).\n   */\n  dist: function(x1, y1, x2, y2) {\n    let a = x1 - x2;\n    let b = y1 - y2;\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n  },\n\n  /**\n   * Gets a random number based on the Box-Muller gaussian transform.\n   * \n   * By default, it typically returns results within a range of -3 to +3.\n   * \n   * @param {number} [mean = 0] - The mean, 0 by default.\n   * @param {number} [sigma = 1] - Sigma refers to the standard deviation, 1 by default.\n   * @param {boolean} [float = true] - Set to false to return an integer.\n   * @returns {number} The random gaussian.\n   */\n  gaussian: function(mean = 0, sigma = 1, float = true) {\n    let u = 1 - Math.random();\n    let v = Math.random();\n    let z = Math.cos(Math.PI * v) * Math.sqrt(-Math.log(u));\n    let g = z * sigma + mean;\n    return float ? g : Math.round(g);\n  },\n\n  /**\n   * Interpolates linearly between two values. Returns the midway point (0.5) by default.\n   * \n   * @param {number} start - The first value.\n   * @param {number} stop - The second value.\n   * @param {number} [amount = 0.5] - The amount of interpolation, between 0.0 and 1.0.\n   * @returns {number} The interpolated value.\n   */\n  interp: function(start, stop, amount = 0.5) {\n    return amount * (stop - start) + start;\n  },\n\n  /**\n   * Re-maps a number from one range to another.\n   *\n   * @param {number} value - The value to be converted.\n   * @param {number} start1 - The lower bound of the current range.\n   * @param {number} stop1 - The upper bound of the current range.\n   * @param {number} start2 - The lower bound of the target range.\n   * @param {number} stop2 - The upper bound of the target range.\n   * @param {boolean} [float = true] - Set to false to return an integer.\n   * @returns {number} The remapped number.\n   */\n  map: function(value, start1, stop1, start2, stop2, float = true) {\n    let n = (value - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n    return float ? n : Math.round(n);\n  },\n\n  /**\n   * Gets a random number based on the pareto power law distribution (80-20 rule).\n   *\n   * @param {number} min - The minimum value to be returned.\n   * @param {boolean} [float = true] - Set to false to return an integer.\n   * @returns {number} The random pareto number.\n   */\n  pareto: function(min, float = true) {\n    let n = 1.0 - Math.random();\n    let a = Math.log(5) / Math.log(4);\n    let p = min / Math.pow(n, 1.0 / a);\n    return float ? p : Math.round(p);\n  },\n\n  /**\n   * Gets a random number between a minimum and maximum value, or picks a random item from an array.\n   * \n   * @param {(number|array)} [min = 0] - Result is equal to or higher than this. If array, an item is randomly chosen.\n   * @param {number} [max = 1] - Result is equal to or lower than this.\n   * @param {boolean} [float = false] - Set to true to return a floating point number.\n   * @returns {*} The randomised number or array item.\n   */\n  random: function(min = 0, max = 1, float = false) {\n    if (Array.isArray(arguments[0])) {\n      let arr = arguments[0];\n      return arr[Math.round(Math.random() * (arr.length - 1))];\n    } else {\n      let random = Math.random() * (max - min) + min;\n      return (float || max - min <= 1) ? random : Math.round(random);\n    }\n  }\n}\n\nexport { Gen };\n","/**\n * An implementation of Ken Perlin's noise algorithm in 2D.\n * \n * With thanks to Joe Iddon. https://github.com/joeiddon/perlin\n */\nclass Noise {\n  constructor() {\n    this.grad = {};\n    this.cache = {};\n  }\n\n  /**\n   * Get the noise value at the specified co-ordinates.\n   * \n   * @param {number} x - The noise x co-ordinate.\n   * @param {number} [y = 0] - The noise y co-ordinate.\n   * @returns {number} the noise value (float between -1 and 1).\n   */\n  get(x, y = 0) {\n    if (this.cache.hasOwnProperty([x, y])) return this.cache[[x, y]];\n    \n    let xf = Math.floor(x);\n    let yf = Math.floor(y);\n    \n    let tl = this.#gridDotProduct(x, y, xf, yf);\n    let tr = this.#gridDotProduct(x, y, xf + 1, yf);\n    let bl = this.#gridDotProduct(x, y, xf, yf + 1);\n    let br = this.#gridDotProduct(x, y, xf + 1, yf + 1);\n    \n    let xt = this.#fade(x - xf, tl, tr);\n    let xb = this.#fade(x - xf, bl, br);\n    let v = this.#fade(y - yf, xt, xb);\n    \n    this.cache[[x, y]] = v;\n    \n    return v;\n  }\n\n  #gridDotProduct(x, y, vx, vy){\n    let gVec, dVec = { x: x - vx, y: y - vy };\n\n    if (this.grad[[vx, vy]]){\n      gVec = this.grad[[vx, vy]];\n    } else {\n      let th = Math.random() * 2 * Math.PI;\n      gVec = { x: Math.cos(th), y: Math.sin(th) };\n      this.grad[[vx, vy]] = gVec;\n    }\n\n    return dVec.x * gVec.x + dVec.y * gVec.y;\n  }\n\n  #fade(x, a, b){\n    let s = 6 * x**5 - 15 * x**4 + 10 * x**3;\n    return a + s * (b - a);\n  }\n}\n\nexport { Noise };\n"],"names":["$85e5d838be2bb839$export$6db80416c61d51ca","constructor","element","namespace","this","document","createElementNS","cursorX","cursorY","isValid","nodeName","setAttribute","addEventListener","type","callback","addTo","node","appendChild","animate","keyframes","options","content","text","innerHTML","create","child","defsCheck","createCurve","points","curveFactor","path","pathData","flat","i","length","x0","y0","x1","y1","x2","y2","set","d","stroke","fill","createFilter","id","isMainSVG","filter","x","y","width","height","filterUnits","color_interpolation_filters","createGradient","colours","rotation","gradient","gradientTransform","stop_color","offset","createPattern","pattern","patternUnits","delete","remove","get","attribute","getAttributeNS","getCentre","bbox","getBBox","moveTo","c","t","createTransform","setTranslate","addTransform","rotate","angle","cx","cy","setRotate","save","name","prompt","a","createElement","download","data","outerHTML","file","Blob","href","URL","createObjectURL","click","scale","sx","sy","t1","t2","setScale","attributes","key","prop","replace","setAttributeNS","trackCursor","point","DOMPoint","event","style","touchAction","clientX","clientY","matrixTransform","getScreenCTM","inverse","Math","ceil","transform","baseVal","appendItem","createSVGTransform","defs","querySelector","prepend","Error","Object","prototype","toString","call","toLowerCase","$097705c8ce77c34c$export$dde7b1cd7af1d184","chance","n1","n2","random","constrain","num","min","max","dist","b","sqrt","pow","gaussian","mean","sigma","float","u","v","g","cos","PI","log","round","interp","start","stop","amount","map","value","start1","stop1","start2","stop2","n","pareto","p","Array","isArray","arguments","arr","$61af366e9716361c$export$484d33a0500a4ce1","grad","cache","hasOwnProperty","xf","floor","yf","tl","gridDotProduct","tr","bl","br","xt","fade","xb","vx","vy","gVec","dVec","th","sin"],"version":3,"file":"svjs.min.js.map"}