{"mappings":"AASE,MAAAA,EAIAC,QAAA,K,QAOO,K,sBAIA,6BAkBPC,YAAAC,EAAA,MAAAC,EAAAC,KAAAD,WAEAC,KAAAF,QAAAG,SAAAC,gBAAAH,EAAAD,GAQEE,MAAKG,EAAQL,GACbE,KAAKI,YAAQN,EAEI,QAAjBE,KAAOI,aAAUJ,KAAAF,QAAAO,aAAA,QAAAN,EACnB,C,MAmBIO,GAGF,OAFAA,EAAAC,YAAAP,KAAAF,SAEME,I,QAiBQF,GAGd,OAHqBE,KAAAQ,MAAA,IAAAb,EAAAG,GAErBE,KAAAF,QAAaS,YAAMP,KAASQ,MAAAV,SACvBE,KAAAQ,K,gBAkCMC,EAAAC,EAAA,SAAAC,EAAA,GAAAC,EAAA,qBACbZ,MAAAa,IAEA,MAAAC,EAAA,IAAAnB,EAAA,GAAAe,aAQEI,EAAMC,IAAA,CAEFN,KAEAO,cAAS,GAAAJ,IACXK,kBAAmB,UAAAN,O,OAEZX,MAAGkB,IACVX,YAAQO,EAAMhB,SACdgB,C,CAWJK,cAAAV,GAMET,MAAAa,IAGF,MAAAO,EAAA,IAAAzB,EAAA,WAEAyB,EAAAL,IAAA,CAMMN,GAAIA,IAaR,OARFT,MAAAkB,IAMEX,YAAMa,EAAkBtB,SAEpBsB,CAGN,C,06BCvL4B,C","sources":["src/sv.js","src/gen.js"],"sourcesContent":["/**\r\n * A class to instantiate a new SvJs element.\r\n */\r\nexport default class SvJs {\r\n\r\n  /**\r\n   * Class fields.\r\n   */\r\n  cursorX = null;\r\n  cursorY = null;\r\n  elementName;\r\n  namespace = 'http://www.w3.org/2000/svg';\r\n\r\n  /**\r\n   * Create an SVG element.\r\n   * \r\n   * @param {string} element - The name of the SVG element to create. \r\n   * @param {string} namespace - The namespace url to reference.\r\n   */\r\n  constructor(element = 'svg', namespace = this.namespace) {\r\n    this.element = document.createElementNS(namespace, element);\r\n\r\n    this.#isValid(element);\r\n\r\n    this.elementName = element;\r\n\r\n    if (this.elementName === 'svg') {\r\n      this.element.setAttribute('xmlns', namespace);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the SVG element to the specified node.\r\n   * \r\n   * @chainable\r\n   * @param {node} node - A HTML or SVG parent node.\r\n   * @returns {object} itself.\r\n   */\r\n  addTo(node) {\r\n    node.appendChild(this.element);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Create and append an SVG child element.\r\n   *\r\n   * @chainable\r\n   * @param {string} element - The name of the SVG element to create.\r\n   * @returns {object} The created SVG child element.\r\n   */\r\n  create(element) {\r\n    this.child = new SvJs(element);\r\n    this.element.appendChild(this.child.element);\r\n\r\n    return this.child;\r\n  }\r\n\r\n  /**\r\n   * Create a gradient and append it to the defs element.\r\n   * \r\n   * @chainable\r\n   * @param {string} id - The id. Reference this when applying the gradient.\r\n   * @param {string} type - Accepts linear or radial.\r\n   * @param {number} rotation - The angle of rotation. \r\n   * @param {string} units - Accepts userSpaceOnUse or objectBoundingBox.\r\n   * @returns {object} The created gradient element.\r\n   */\r\n  createGradient(id, type = 'linear', rotation = 45, units = 'objectBoundingBox') {\r\n    this.#isMainSVG();\r\n    \r\n    const gradient = new SvJs(`${type}Gradient`);\r\n    gradient.set({\r\n      id: id,\r\n      gradientUnits : `${units}`,\r\n      gradientTransform: `rotate(${rotation})`\r\n    });\r\n\r\n    const defs = this.#defsCheck();\r\n    defs.appendChild(gradient.element);\r\n\r\n    return gradient;\r\n  }\r\n\r\n  /**\r\n   * Create a pattern and append it to the defs element.\r\n   * \r\n   * @chainable\r\n   * @param {string} id - The id. Reference this when applying the gradient.\r\n   * @returns {object} The created pattern element.\r\n   */\r\n  createPattern(id) {\r\n    this.#isMainSVG();\r\n    \r\n    const pattern = new SvJs('pattern');\r\n    pattern.set({ id: id });\r\n\r\n    const defs = this.#defsCheck();\r\n    defs.appendChild(pattern.element);\r\n\r\n    return pattern;\r\n  }\r\n\r\n  /**\r\n   * Delete the SVG element.\r\n   */\r\n  delete() {\r\n    this.element.remove();\r\n  }\r\n\r\n  /**\r\n   * Get a given attribute's value.\r\n   * \r\n   * @param {*} attribute - The attribute.\r\n   * @returns {*} the attribute value.\r\n   */\r\n  get(attribute) {\r\n    return this.element.getAttributeNS(null, attribute);\r\n  }\r\n\r\n  /**\r\n   * Set the attribute values of an SVG element.\r\n   * \r\n   * @chainable\r\n   * @param {object} attributes - An object of attribute value pairs.\r\n   * @returns {object} itself.\r\n   */\r\n  set(attributes) {\r\n    for (let key in attributes) {\r\n      this.element.setAttributeNS(null, key, attributes[key]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the cursorX and cursorY properties on the main SVG element.\r\n   * Accurate cursor tracking via matrix transformation. Compatible with touch devices.\r\n   * \r\n   * @chainable\r\n   * @returns {object} itself.\r\n   */\r\n  trackCursor() {\r\n    this.#isMainSVG();\r\n\r\n    let point = this.element.createSVGPoint();\r\n\r\n    this.element.addEventListener('pointermove', (event) => {\r\n      this.element.style.touchAction = 'none';\r\n      point.x = event.clientX;\r\n      point.y = event.clientY;\r\n      point = point.matrixTransform(this.element.getScreenCTM().inverse());\r\n      this.cursorX = Math.ceil(point.x);\r\n      this.cursorY = Math.ceil(point.y);\r\n    });\r\n\r\n    this.element.addEventListener('pointerleave', () => {\r\n      this.element.style.touchAction = 'auto';\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Check if the def element already exists, and create it if it doesn't.\r\n   * \r\n   * @returns {object} The defs element.\r\n   */\r\n  #defsCheck(element) {\r\n    return document.querySelector('defs') ?\r\n      document.querySelector('defs')\r\n      : this.create('defs').element;\r\n  }\r\n\r\n  /**\r\n   * Check if the element is the main SVG element.\r\n   * \r\n   * @throws {error} if the element is not the main SVG.\r\n   */\r\n  #isMainSVG() {\r\n    if (this.elementName !== 'svg') {\r\n      throw new Error('This function can only be called on the main SVG element.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if the created SVG element is valid.\r\n   * \r\n   * @param {string} element - The SVG element name to validate.\r\n   */\r\n  #isValid(element) {\r\n    const elementToString = Object.prototype.toString.call(this.element).toLowerCase();\r\n\r\n    if (elementToString !== `[object svg${element.toLowerCase()}element]`) {\r\n      throw new Error(`Invalid SVG element: ${elementToString}`); \r\n    }\r\n  }\r\n}\r\n","/**\r\n * A collection of useful functions for generative art.\r\n */\r\nconst gen = {\r\n  /**\r\n   * Constrains (or clamps) a value between a minimum and maximum value.\r\n   * \r\n   * @param {number} num - The number to constrain.\r\n   * @param {number} min - The minimum limit.\r\n   * @param {number} max - The maximum limit.\r\n   * @returns {number} The constrained number.\r\n   */\r\n  constrain: function(num, min, max) {\r\n    let n = Math.min(Math.max(num, min), max);\r\n    return n;\r\n  }\r\n}\r\n\r\nexport default gen;\r\n"],"names":["$85e5d838be2bb839$export$2e2bcd8739ae039","cursorX","constructor","element","namespace","this","document","createElementNS","isValid","elementName","setAttribute","node","appendChild","child","id","type","rotation","units","isMainSVG","gradient","set","gradientUnits","gradientTransform","defsCheck","createPattern","pattern"],"version":3,"file":"svjs.min.js.map"}